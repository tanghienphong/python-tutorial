import openai
import os
from dotenv import load_dotenv
load_dotenv()
import time
from datetime import datetime

# ====== C·∫•u h√¨nh API Key ======
openai.api_key = os.getenv("OPENAI_API_KEY")  # Ho·∫∑c thay tr·ª±c ti·∫øp API Key t·∫°i ƒë√¢y

# ====== H√†m x·ª≠ l√Ω diff: gi·ªØ l·∫°i d√≤ng th√™m ho·∫∑c context ======
def extract_relevant_diff(diff_text: str) -> str:
    relevant_lines = []
    for line in diff_text.splitlines():
        if line.startswith('+++') or line.startswith('@@'):
            relevant_lines.append(line)
        elif line.startswith('+') and not line.startswith('+++'):
            relevant_lines.append(line)
        # C√°c d√≤ng - (b·ªã x√≥a) s·∫Ω b·ªã lo·∫°i b·ªè
    return "\n".join(relevant_lines)

# ====== ƒê·ªçc file diff v√† checklist ======
with open(os.getenv("GIT_DIFF_FILE"), "r", encoding="utf-8") as f:
    raw_diff_content = f.read()
    diff_content = extract_relevant_diff(raw_diff_content)

with open(os.getenv("PHP_SYMFONY_CODE_REVIEW_CHECKLIST"), "r", encoding="utf-8") as f:
    checklist = f.read()

# ====== Prompt cho GPT ======
system_prompt = """
You are a senior PHP/Symfony code reviewer.
Review the following Git diff according to the checklist provided.
Only focus on ADDED or MODIFIED lines. Skip deleted ones.
Return the results grouped by file with Markdown format, listing:
- File name
- Issues found (line number if available)
- Suggestions to fix (actionable, concise, no jargon)
"""

user_prompt = f"""
## Checklist:
{checklist}

## Git Diff (Added/Modified only):
{diff_content}
"""

# ====== Ghi log th·ªùi gian b·∫Øt ƒë·∫ßu ======
start_time = time.time()
start_dt = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
print(f"‚è≥ Start time: {start_dt}")
print("üîç Loading... Please wait while the AI reviews your code...")

# ====== G·ªçi OpenAI API ======
response = openai.ChatCompletion.create(
    model="gpt-4o",
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ],
    temperature=0.2,
    max_tokens=3000
)

# ====== Nh·∫≠n k·∫øt qu·∫£ v√† th√¥ng tin token ======
review_output = response["choices"][0]["message"]["content"]
usage = response.get("usage", {})
total_tokens = usage.get("total_tokens", "N/A")
prompt_tokens = usage.get("prompt_tokens", "N/A")
completion_tokens = usage.get("completion_tokens", "N/A")

# ====== Ghi ra file Markdown ======
output_file = "review_feedback.md"
with open(output_file, "w", encoding="utf-8") as md_file:
    md_file.write("# üîç AI Code Review Feedback\n\n")
    md_file.write(review_output)

# ====== Th·ªùi gian k·∫øt th√∫c ======
end_time = time.time()
end_dt = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
duration = round(end_time - start_time, 2)

# ====== Th√¥ng b√°o ho√†n t·∫•t ======
print(f"\n‚úÖ Done! Output saved to: {output_file}")
print(f"üïí End time: {end_dt}")
print(f"‚è±Ô∏è Duration: {duration} seconds")
print(f"üìä Token usage: {total_tokens} total (Prompt: {prompt_tokens}, Completion: {completion_tokens})")
